name: Build and deploy Backend to EC2
run-name: "#${{ github.run_number }} - ${{ github.ref_name }} - ${{ github.sha }} - Backend"

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 8.x
  WORKING_DIRECTORY: Api

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
        
      - name: Restore
        run: dotnet restore "${{ env.WORKING_DIRECTORY }}"
        
      - name: Build
        run: dotnet build "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-restore
        
      - name: Test
        run: dotnet test "${{ env.WORKING_DIRECTORY }}" --no-build

      - name: Install dotnet-ef tool
        run: dotnet tool install --global dotnet-ef
        
      - name: Inject choose config appsetting
        uses: microsoft/variable-substitution@v1
        with:
          files: "${{ github.workspace }}/${{ env.WORKING_DIRECTORY }}/appsettings.json"
        env:
          ASPNETCORE_ENVIRONMENT: Development

      - name: Run database migrations
        run: dotnet ef database update --project "Persistance/Persistance.csproj"
        env:
          DOTNET_ENVIRONMENT: Production
          DATABASE_CONNECTION_STRING: ${{ secrets.DATABASE_CONNECTION_STRING }}

          
      - name: Inject hashkey secrets to application
        uses: microsoft/variable-substitution@v1
        with:
          files: "${{ github.workspace }}/${{ env.WORKING_DIRECTORY }}/appsettings.Development.json"
        env:
          AppSettings.JwtSettings:Key: ${{ secrets.HASHKEY }}

      - name: Inject aws access key secrets to application
        uses: microsoft/variable-substitution@v1
        with:
          files: "${{ github.workspace }}/${{ env.WORKING_DIRECTORY }}/appsettings.Development.json"
        env:
          AppSettings.AWS:AccessKey: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AppSettings.AWS:SecretKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Inject DB secrets to application
        uses: microsoft/variable-substitution@v1
        with:
          files: "${{ github.workspace }}/${{ env.WORKING_DIRECTORY }}/appsettings.Development.json"
        env:
          AppSettings.DatabaseConnectionString: ${{ secrets.DATABASE_CONNECTION_STRING }}

      - name: Inject api hosts secrets to application
        uses: microsoft/variable-substitution@v1
        with:
          files: "${{ github.workspace }}/${{ env.WORKING_DIRECTORY }}/appsettings.Development.json"
        env:
          AppSettings.DatabaseConnectionString: ${{ secrets.HOST_API }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  
      - name: Extract metadata (tags, version) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/vng-api
          tags: |
            type=raw,value=${{ github.sha }}
  
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  trivy-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
      - name: Pull Docker Image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/vng-api:${{ github.sha }}
      - name: Scan Docker Image with Trivy
        run: trivy image ${{ secrets.DOCKER_USERNAME }}/vng-api:${{ github.sha }}
          
  deploy:
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps: 
      - name: Decode EC2 Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" | base64 --decode > ~/.ssh/ec2-key.pem
          ls -l ~/.ssh  # List files to ensure the key is created
          
      - name: Set permissions for EC2 key
        run: |
          chmod 600 ~/.ssh/ec2-key.pem
          ls -l ~/.ssh  # Verify permissions
  
      - name: Deploy to EC2
        env:
          EC2_USER: ubuntu
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_KEY_PATH: ~/.ssh/ec2-key.pem
          DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/vng-api:${{ github.sha }}
        run: |
          ssh -o StrictHostKeyChecking=no -i $EC2_KEY_PATH $EC2_USER@$EC2_HOST <<EOF
            # Clean up previous containers and images
            sudo docker stop vng-app || true
            sudo docker rm -f vng-app || true
            sudo docker rmi -f $DOCKER_IMAGE || true
            
            # Pull the new Docker image
            sudo docker pull $DOCKER_IMAGE
            
            # Run the new container with Nginx and Let's Encrypt
            sudo docker run -dp 3000:8080 \
              --name vng-app \
              --mount type=volume,source=letsencrypt,target=/etc/letsencrypt \
              $DOCKER_IMAGE
          EOF

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1  # e.g., us-east-1
  
      - name: Send success email
        if: success()
        run: |
          aws ses send-email \
            --from "sender@koffeeaddicted.com" \
            --destination "ToAddresses=recca5p@gmail.com" \
            --message "Subject={Data=GitHub Actions: Deployment Successful,Charset=UTF-8},Body={Text={Data=The workflow ${{ github.workflow }} in ${{ github.repository }} has completed successfully. Commit: ${{ github.sha }},Charset=UTF-8}}"
  
      - name: Send failure email
        if: failure()
        run: |
          aws ses send-email \
            --from "sender@koffeeaddicted.com" \
            --destination "ToAddresses=recca5p@gmail.com" \
            --message "Subject={Data=GitHub Actions: Deployment Failed,Charset=UTF-8},Body={Text={Data=The workflow ${{ github.workflow }} in ${{ github.repository }} has failed. Please check the logs for more information. Commit: ${{ github.sha }},Charset=UTF-8}}"
